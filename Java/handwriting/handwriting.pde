PImage a;
//  the specialized matrix
int []num = new int[64];

// match temp
float [][]formatch ={
 {0.32407406,0.24279836,0.0,0.0,0.0,0.19341564,0.20679012,0.0,0.0,0.0,0.16255145,0.18209876,0.0,0.0,0.0,0.16769548,0.27572018,0.0,0.0,0.0,0.39506173,0.38168725,0.0,0.0,0.0}
,{0.24973877,0.0,0.0,0.0,0.0,0.24242425,0.0,0.0,0.0,0.0,0.47962382,0.2277952,0.0,0.0,0.0,0.31765935,0.292581,0.0,0.0,0.0,0.42842215,0.38871473,0.0,0.0,0.0}
,{0.32539684,0.23922902,0.0,0.0,0.0,0.2585034,0.007936508,0.0,0.0,0.0,0.18594104,0.0,0.0,0.0,0.0,0.1984127,0.0,0.0,0.0,0.0,0.39795917,0.28117913,0.0,0.0,0.0}
,{0.0,0.0,0.0,0.0,0.03448276,0.0,0.004310345,0.14439656,0.112068966,0.45043105,0.17025863,0.42456895,0.1637931,0.37068966,0.6012931,0.5344828,0.0,0.0,0.32543105,0.41379312,0.56681037,0.18318966,0.39870688,0.2112069,0.4525862}
,{0.3626894,0.18371212,0.0,0.0,0.0,0.21212122,0.19886364,0.0,0.0,0.0,0.5094697,0.03219697,0.0,0.0,0.0,0.1780303,0.0,0.0,0.0,0.0,0.32102272,0.21022727,0.0,0.0,0.0}
,{0.0,0.29944444,0.02,0.0,0.0,0.0,0.17777778,0.0,0.0,0.0,0.19777778,0.35222223,0.07777778,0.0,0.0,0.0,0.18,0.0,0.0,0.0,0.12555556,0.13166666,0.0,0.0,0.0}
,{0.2952381,0.34047619,0.21071428,0.0,0.0,0.31666666,0.18809524,0.18571429,0.0,0.0,0.36666667,0.4595238,0.15357143,0.0,0.0,0.0,0.075,0.21428572,0.0,0.0,0.3297619,0.37380952,0.10595238,0.0,0.0}
,{0.184,0.0,0.0,0.0,0.0,0.16666667,0.0,0.0,0.0,0.0,0.384,0.172,0.0,0.0,0.0,0.256,0.16866666,0.0,0.0,0.0,0.20333333,0.2,0.0,0.0,0.0}
,{0.1798349,0.0,0.0,0.0,0.0,0.03832547,0.063089624,0.0,0.0,0.0,0.38974056,0.034787737,0.0,0.0,0.0,0.15625,0.0,0.0,0.0,0.0,0.16745283,0.095518865,0.0,0.0,0.0}
,{0.051666666,0.1725,0.0,0.0,0.0,0.0,0.14,0.0,0.0,0.0,0.0,0.20666666,0.0,0.0,0.0,0.0,0.20333333,0.0,0.0,0.0,0.3525,0.16583334,0.0,0.0,0.0}
,{0.17410715,0.0,0.0,0.0,0.0,0.18005952,0.017113095,0.0,0.0,0.0,0.4828869,0.02232143,0.0,0.0,0.0,0.46354166,0.0,0.0,0.0,0.0,0.23363096,0.13913691,0.0,0.0,0.0}
,{0.19835392,0.0,0.0,0.0,0.0,0.17777778,0.0,0.0,0.0,0.0,0.181893,0.0,0.0,0.0,0.0,0.18436214,0.0,0.0,0.0,0.0,0.36296296,0.08230453,0.0,0.0,0.0}
,{0.49130434,0.5,0.1884058,0.0,0.0,0.30289856,0.33043477,0.21304348,0.0,0.0,0.22028986,0.19855073,0.18985507,0.0,0.0,0.21014492,0.18985507,0.17826086,0.0,0.0,0.1594203,0.16376811,0.17536232,0.0,0.0}
,{0.41491842,0.30769232,0.0,0.0,0.0,0.3764569,0.21911421,0.0,0.0,0.0,0.22494173,0.20512821,0.0,0.0,0.0,0.22027972,0.20512821,0.0,0.0,0.0,0.23076923,0.24358974,0.0,0.0,0.0}
,{0.35064936,0.44011545,0.22510822,0.0,0.0,0.27994227,0.0,0.28282827,0.0,0.0,0.24963924,0.0,0.25685427,0.0,0.0,0.3145743,0.0,0.25974026,0.0,0.0,0.3015873,0.3924964,0.2972583,0.0,0.0}
,{0.4114035,0.31754386,0.0,0.0,0.0,0.21929824,0.24210526,0.0,0.0,0.0,0.45438597,0.33070177,0.0,0.0,0.0,0.21052632,0.0,0.0,0.0,0.0,0.21052632,0.0,0.0,0.0,0.0}
,{0.34635416,0.3298611,0.0,0.0,0.0,0.23350695,0.3637153,0.0,0.0,0.0,0.4045139,0.34461805,0.0,0.0,0.0,0.0,0.22395833,0.0,0.0,0.0,0.0,0.32291666,0.10243055,0.0,0.0}
,{0.3492823,0.26435408,0.0,0.0,0.0,0.4784689,0.0,0.0,0.0,0.0,0.2751196,0.0,0.0,0.0,0.0,0.31698564,0.0,0.0,0.0,0.0,0.23923445,0.0,0.0,0.0,0.0}
,{0.34273505,0.094017096,0.0,0.0,0.0,0.1905983,0.0,0.0,0.0,0.0,0.2880342,0.011111111,0.0,0.0,0.0,0.035042737,0.2974359,0.0,0.0,0.0,0.31367522,0.2854701,0.0,0.0,0.0}
,{0.12926652,0.03195352,0.0,0.0,0.0,0.16848221,0.0,0.0,0.0,0.0,0.40522876,0.21786493,0.0,0.0,0.0,0.15686275,0.0,0.0,0.0,0.0,0.13507625,0.26361656,0.0,0.0,0.0}
,{0.13679245,0.18301886,0.0,0.0,0.0,0.16320755,0.2735849,0.0,0.0,0.0,0.16037735,0.3235849,0.0,0.0,0.0,0.2773585,0.2264151,0.0,0.0,0.0,0.4471698,0.1764151,0.0,0.0,0.0}
,{0.0,0.0,0.1987315,0.0,0.0,0.29492602,0.119450316,0.09725159,0.0,0.0,0.2473573,0.20930232,0.0,0.0,0.0,0.1321353,0.3065539,0.0,0.0,0.0,0.0010570824,0.3541226,0.0,0.0,0.0}
,{0.016666668,0.32222223,0.029166667,0.2,0.0,0.29722223,0.3125,0.16388889,0.24444444,0.0,0.25277779,0.23472223,0.23888889,0.2625,0.0,0.25555557,0.21666667,0.36666667,0.12083333,0.0,0.20555556,0.10972222,0.41666666,0.0,0.0}
,{0.20625,0.099107146,0.0,0.0,0.0,0.36160713,0.04107143,0.0,0.0,0.0,0.3,0.0,0.0,0.0,0.0,0.39107144,0.014285714,0.0,0.0,0.0,0.17589286,0.16428572,0.0,0.0,0.0}
,{0.26736844,0.16842106,0.0,0.06315789,0.58105266,0.0,0.47157896,0.082105264,0.62736845,0.1368421,0.0,0.02736842,0.72,0.31578946,0.0,0.0,0.33684212,0.33052632,0.0,0.0,0.43157893,0.26526317,0.0,0.0,0.0}
,{0.31096774,0.3212903,0.0,0.0,0.03935484,0.016774194,0.16709678,0.0,0.0,0.0,0.16387096,0.0148387095,0.0,0.0,0.0,0.20064516,0.0,0.0,0.0,0.0,0.43096775,0.1948387,0.0,0.0,0.074193545}
// followings are numbers to be recognized
,{0.6515151,0.0,0.0,0.0,0.0,0.6666667,0.0,0.0,0.0,0.0,0.68560606,0.0,0.0,0.0,0.0,0.6666667,0.0,0.0,0.0,0.0,0.6666667,0.0,0.0,0.0,0.0}
,{0.44665718,0.3541963,0.0,0.0,0.0,0.07254623,0.21763869,0.0,0.0,0.0,0.0,0.2688478,0.0,0.0,0.0,0.11522049,0.23755334,0.0,0.0,0.0,0.47226173,0.122332856,0.0,0.0,0.0}
,{0.33333334,0.25648147,0.0,0.0,0.0,0.0064814813,0.23148148,0.0,0.0,0.0,0.26481482,0.3712963,0.0,0.0,0.0,0.0,0.25555557,0.0,0.0,0.0,0.31203705,0.38425925,0.0,0.0,0.0}
,{0.24754901,0.18382353,0.0,0.0,0.0,0.2855392,0.24877451,0.0,0.0,0.0,0.45833334,0.47671568,0.116421565,0.0,0.0,0.11519608,0.28431374,0.036764707,0.0,0.0,0.0,0.25612745,0.0,0.0,0.0}
,{0.27969348,0.37931034,0.2816092,0.28544062,0.04597701,0.2394636,0.21072797,0.0,0.0,0.0,0.27203065,0.40804598,0.31609195,0.37739465,0.0,0.0,0.0,0.0,0.47509578,0.0,0.42528737,0.15134099,0.33524904,0.33908045,0.0}
,{0.061818182,0.3490909,0.0,0.0,0.0,0.3709091,0.023636363,0.0,0.0,0.0,0.48909092,0.07272727,0.0,0.0,0.0,0.43454546,0.37636364,0.22363636,0.0,0.0,0.49454546,0.19090909,0.32181817,0.0,0.0}
,{0.28591955,0.27586207,0.34770116,0.33764368,0.0,0.0,0.0,0.3433908,0.048850574,0.0,0.0,0.0,0.38649425,0.0,0.0,0.0,0.12787357,0.26436782,0.0,0.0,0.0,0.38793105,0.00862069,0.0,0.0}
,{0.43758765,0.41795233,0.0,0.0,0.0,0.27349228,0.36325386,0.0,0.0,0.0,0.6157083,0.3043478,0.0,0.0,0.0,0.28190744,0.3436185,0.029453015,0.0,0.0,0.40112203,0.40532959,0.028050492,0.0,0.0}
,{0.18311688,0.30779222,0.2896104,0.12207792,0.0,0.38961038,0.0,0.024675325,0.42207792,0.0,0.44935066,0.26883116,0.43506494,0.27532467,0.0,0.0,0.0,0.37402597,0.011688312,0.0,0.0,0.0,0.4077922,0.0,0.0}
};
boolean judge = false;


void setup()
{
  size(300,600);
  background(255,255,255);
}
void draw()
{  
  if(judge)
  {
    printresult();
    judge = false;
  }
}

void mousePressed()
{
  if( mouseButton == RIGHT)
  {
    background(255,255,255);
    println("");
  }
}

void mouseDragged()
{
  fill(0,0,0);
  ellipse(mouseX*1.0,mouseY*1.0,7.0,7.0);
}

void mouseReleased()
{
  saveFrame("save.png");
  judge = true;
}


void printresult()
{
   a = loadImage("save.png");
   int top = 0;
   int bottom = 0;
   int left = 0;
   int right = 0;
   int addone = 0;
   
   for(int i=5;i<a.width;i++)
      for(int j=10;j<a.height;j++)
      {
        // -1 equals white
        if(a.pixels[j*a.width+i]!=-1){
          right = j;
          break;
        }
      }
      
   for(int i=a.width-1;i>=5;i--)
      for(int j=10;j<a.height;j++)
      {
        // -1 equals white
        if(a.pixels[j*a.width+i]!=-1){
          left = i;
          break;
        }
      }      
      
   for(int i=10;i<a.height;i++)
      for(int j=5;j<a.width;j++)
      {
        // -1 equals white
        if(a.pixels[i*a.width+j]!=-1){
          bottom = i;
          break;
        }
      }      
 
   for(int i=a.height-1;i>=10;i--)
      for(int j=5;j<a.width;j++)
      {
        // -1 equals white
        if(a.pixels[i*a.width+j]!=-1){
          top = i;
          break;
        }
      }       
     
      
      
   int basey = (bottom-top)/5;
   int basex = (right-left)/5;   
   int []feature = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   float []matchtemp = new float[25];
   int total = basex*basey;
   
   
   for(int i=left;i<right;i++)
      for(int j=top;j<bottom;j++)
       {
          if(a.pixels[j*a.width+i]!=-1)
          {
            switch(((i-left)/basex)*10+((j-top)/basey))
            {
              case 0: feature[0]++;break;
              case 10:feature[1]++;break;
              case 20:feature[2]++;break;
              case 30: feature[3]++;break;
              case 40:feature[4]++;break;
              case 1:feature[5]++;break;
              case 11: feature[6]++;break;
              case 21:feature[7]++;break;
              case 31:feature[8]++;break;     
              case 41: feature[9]++;break;
              case 2:feature[10]++;break;
              case 12:feature[11]++;break;
              case 22: feature[12]++;break;
              case 32:feature[13]++;break;
              case 42:feature[14]++;break;
              case 3: feature[15]++;break;
              case 13:feature[16]++;break;
              case 23:feature[17]++;break;
              case 33: feature[18]++;break;
              case 43:feature[19]++;break;
              case 4:feature[20]++;break;
              case 14: feature[21]++;break;
              case 24:feature[22]++;break;
              case 34:feature[23]++;break;
              case 44: feature[24]++;break;              
              default:;
            }
          }       
       }
       
       
             println();  
     for(int i=0;i<25;i++)
        {
          matchtemp[i] = feature[i]*1.0/total;
          print(matchtemp[i]+",");
        }  
       
       
   /*
   
   // judging part
   // 差异矩阵赋值
   for(int i=0;i<26;i++)
     for(int j=0;j<8;j++)
     {
       fordifference[i][j] = formatch[i][j+1]-formatch[i][j];
     }
     
     
   */  
   
   
   float compare = 100.0;
   float temp = 0.0;
   int index = 0;
   float jilu = 0.0;
   
   for(int i=0;i<35;i++)
   {
      for(int j=0;j<25;j++)
      {
        temp+=abs(matchtemp[j]-formatch[i][j]);
      }
      // tsting point
      if(i==25)
        jilu = temp;
      
      if(temp<compare)
      {
        compare = temp;
        index = i+1;
        temp = 0.0;
      }   
      else
      {
        temp = 0.0;
      }
   }

   
 //  println(jilu);
   fill(0,0,0);
   println();
   switch(index)
   {
     case 1:   text("result is : a",3,10);break;
     case 2:    text("result is : b",3,10);break;
     case 3:   text("result is : c",3,10);break;
     case 4:   text("result is : d",3,10);break;
     case 5:    text("result is : e",3,10);break;
     case 6:    text("result is : f",3,10);break;
     case 7:    text("result is : g",3,10);break;
     case 8:   text("result is : h",3,10);break;
     case 9:    text("result is : i",3,10);break;
     case 10:   text("result is : j",3,10);break;
     case 11:    text("result is : k",3,10);break;
     case 12:   text("result is : l",3,10);break;
     case 13:    text("result is : m",3,10);break;
     case 14:    text("result is : n",3,10);break;
     case 15:    text("result is : o",3,10);break;
     case 16:    text("result is : p",3,10);break;
     case 17:    text("result is : q",3,10);break;
     case 18:    text("result is : r",3,10);break;
     case 19:   text("result is : s",3,10);break;
     case 20:    text("result is : t",3,10);break;
     case 21:   text("result is : u",3,10);break;
     case 22:    text("result is : v",3,10);break;
     case 23:   text("result is : w",3,10);break;
     case 24:   text("result is : x",3,10);break;
     case 25:   text("result is : y",3,10); break;
     case 26:   text("result is : z",3,10);break;
     case 27:   text("result is : 1",3,10);break;
     case 28:   text("result is : 2",3,10);break;     
     case 29:   text("result is : 3",3,10);break;     
     case 30:   text("result is : 4",3,10);break;          
     case 31:   text("result is : 5",3,10);break;     
     case 32:   text("result is : 6",3,10);break;     
     case 33:   text("result is : 7",3,10);break;     
     case 34:   text("result is : 8",3,10);break;     
     case 35:   text("result is : 9",3,10);break;          
   }
   


}
